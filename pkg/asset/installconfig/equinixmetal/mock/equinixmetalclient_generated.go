// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	packngo "github.com/packethost/packngo"
	reflect "reflect"
)

// MockAPI is a mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// ListProjects mocks base method
func (m *MockAPI) ListProjects(ctx context.Context) ([]packngo.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", ctx)
	ret0, _ := ret[0].([]packngo.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects
func (mr *MockAPIMockRecorder) ListProjects(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockAPI)(nil).ListProjects), ctx)
}

// ListFacilities mocks base method
func (m *MockAPI) ListFacilities(ctx context.Context) ([]packngo.Facility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFacilities", ctx)
	ret0, _ := ret[0].([]packngo.Facility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetros mocks base method
func (m *MockAPI) ListMetros(ctx context.Context) ([]packngo.Metro, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetros", ctx)
	ret0, _ := ret[0].([]packngo.Metro)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFacilities indicates an expected call of ListFacilities
func (mr *MockAPIMockRecorder) ListFacilities(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacilities", reflect.TypeOf((*MockAPI)(nil).ListFacilities), ctx)
}

// ListFacilities indicates an expected call of ListFacilities
func (mr *MockAPIMockRecorder) ListMetros(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetros", reflect.TypeOf((*MockAPI)(nil).ListMetros), ctx)
}

// ListPlans mocks base method
func (m *MockAPI) ListPlans(ctx context.Context) ([]packngo.Plan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlans", ctx)
	ret0, _ := ret[0].([]packngo.Plan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlans indicates an expected call of ListPlans
func (mr *MockAPIMockRecorder) ListPlans(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlans", reflect.TypeOf((*MockAPI)(nil).ListPlans), ctx)
}
